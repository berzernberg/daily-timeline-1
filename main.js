/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var y=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var k=(m,n,t)=>n in m?y(m,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):m[n]=t;var L=(m,n)=>{for(var t in n)y(m,t,{get:n[t],enumerable:!0})},Y=(m,n,t,e)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of N(n))!E.call(m,i)&&i!==t&&y(m,i,{get:()=>n[i],enumerable:!(e=F(n,i))||e.enumerable});return m};var I=m=>Y(y({},"__esModule",{value:!0}),m);var g=(m,n,t)=>k(m,typeof n!="symbol"?n+"":n,t);var P={};L(P,{default:()=>w});module.exports=I(P);var b=require("obsidian");var x=require("obsidian");var d="daily-notes-timeline",v=class extends x.ItemView{constructor(t,e){super(t);g(this,"plugin");g(this,"contentEl");g(this,"startDate");g(this,"endDate");this.plugin=e;let i=new Date;this.startDate=new Date(i.getFullYear(),i.getMonth(),1),this.endDate=new Date(i.getFullYear(),i.getMonth()+1,0)}getViewType(){return d}getDisplayText(){return"Daily Notes Timeline"}getIcon(){return"calendar-clock"}async onOpen(){let t=this.containerEl.children[1];t.empty(),t.addClass("timeline-view-container"),this.contentEl=t.createDiv({cls:"timeline-content"}),await this.renderControls(),await this.renderTimeline()}async onClose(){this.contentEl.empty()}async renderControls(){let t=this.contentEl.createDiv({cls:"timeline-controls"}),e=t.createDiv({cls:"timeline-controls-left"}),s=t.createDiv({cls:"timeline-controls-right"}).createEl("select",{cls:"dropdown timeline-month-select"});await this.populateMonthSelect(s),s.addEventListener("change",async()=>{let[r,c]=s.value.split("-").map(Number);this.startDate=new Date(r,c,1),this.endDate=new Date(r,c+1,0),await this.renderTimeline()}),e.createEl("button",{text:"\u2190 Previous",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()-1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth(),0),await this.updateMonthSelect(s),await this.renderTimeline()}),e.createEl("button",{text:"Next \u2192",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()+1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth()+2,0),await this.updateMonthSelect(s),await this.renderTimeline()}),e.createEl("button",{text:"Today",cls:"mod-cta"}).addEventListener("click",async()=>{let r=new Date;this.startDate=new Date(r.getFullYear(),r.getMonth(),1),this.endDate=new Date(r.getFullYear(),r.getMonth()+1,0),await this.updateMonthSelect(s),await this.renderTimeline()})}async populateMonthSelect(t){let e=await this.plugin.parser.getAvailableMonths(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat);t.empty();for(let i of e){let[s,o]=i.split("-").map(Number),a=new Date(s,o,1),l=t.createEl("option");l.value=i,l.text=a.toLocaleDateString("en-US",{year:"numeric",month:"long"}),s===this.startDate.getFullYear()&&o===this.startDate.getMonth()&&(l.selected=!0)}}async updateMonthSelect(t){t.value=`${this.startDate.getFullYear()}-${this.startDate.getMonth()}`}async renderTimeline(){let t=this.contentEl.querySelector(".timeline-scroll");t&&t.remove();let e=this.contentEl.createDiv({cls:"timeline-scroll"}),i=await this.plugin.parser.parseDailyNotes(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat,this.startDate,this.endDate);if(i.length===0){e.createDiv({cls:"timeline-empty",text:"No date range selected"});return}await this.renderContinuousTimeline(e,i)}async renderContinuousTimeline(t,e){let s=t.createDiv({cls:"timeline-continuous"}).createDiv({cls:"timeline-track-continuous"}),o=200,a=o*e.length;s.style.width=`${a}px`;for(let l=0;l<e.length;l++){let r=e[l];await this.renderDaySegment(s,r,l,e.length,o)}}async renderDaySegment(t,e,i,s,o){let a=t.createDiv({cls:"timeline-segment"});a.style.width=`${o}px`,a.style.left=`${o*i}px`,e.tasks.length===0&&a.addClass("timeline-segment-empty");let l=new Date(e.date);a.createDiv({cls:"timeline-segment-date"}).setText(l.toLocaleDateString("en-US",{month:"short",day:"numeric"})),a.createDiv({cls:"timeline-segment-weekday"}).setText(l.toLocaleDateString("en-US",{weekday:"short"})),a.createDiv({cls:"timeline-segment-time timeline-segment-time-start"}).setText("00:00"),a.createDiv({cls:"timeline-segment-time timeline-segment-time-end"}).setText("23:59");for(let D of e.tasks)await this.renderTaskInSegment(a,D)}async renderTaskInSegment(t,e){let s=(e.hour*60+e.minute)/1440*100,o=t.createDiv({cls:"timeline-task-dot"});o.style.left=`${s}%`,o.setAttribute("data-status",e.status),o.createDiv({cls:"timeline-task-label"}).setText(e.time);let l=o.createDiv({cls:"timeline-tooltip"}),r=l.createDiv({cls:"timeline-tooltip-content"}),c=r.createDiv({cls:"timeline-tooltip-task"});if(c.textContent=`[${e.status}] `,await this.renderTaskContent(c,e.content),e.subItems.length>0){let h=r.createEl("ul",{cls:"timeline-tooltip-subitems"});for(let u of e.subItems)h.createEl("li").setText(u)}o.addEventListener("mouseenter",()=>{l.addClass("is-visible")}),o.addEventListener("mouseleave",()=>{l.removeClass("is-visible")})}async renderTaskContent(t,e){let i=/!\[\[([^\]]+)\]\]/g,s=0,o;for(;(o=i.exec(e))!==null;){if(o.index>s){let r=t.createSpan();r.textContent=e.substring(s,o.index)}let a=o[1],l=this.plugin.app.vault.getAbstractFileByPath(a);if(l&&l instanceof this.plugin.app.vault.adapter.constructor){let c=t.createDiv({cls:"timeline-tooltip-image"}).createEl("img"),h=this.plugin.app.vault.getResourcePath(l);c.src=h,c.alt=a}else{let c=this.plugin.app.vault.getFiles().find(h=>h.name===a||h.path.endsWith(a));if(c){let u=t.createDiv({cls:"timeline-tooltip-image"}).createEl("img"),D=this.plugin.app.vault.getResourcePath(c);u.src=D,u.alt=a}else{let h=t.createSpan();h.textContent=o[0]}}s=o.index+o[0].length}if(s<e.length){let a=t.createSpan();a.textContent=e.substring(s)}}};var p=require("obsidian");var f=class extends p.PluginSettingTab{constructor(t,e){super(t,e);g(this,"plugin");this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Daily Notes Timeline Settings"}),new p.Setting(t).setName("Daily Notes Folder").setDesc("Path to your daily notes folder (leave empty for vault root or default daily notes location)").addText(e=>e.setPlaceholder("Daily Notes").setValue(this.plugin.settings.dailyNotesFolder).onChange(async i=>{this.plugin.settings.dailyNotesFolder=i,await this.plugin.saveSettings()})),new p.Setting(t).setName("Date Format").setDesc("Format used in daily note filenames (e.g., YYYY-MM-DD)").addText(e=>e.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async i=>{this.plugin.settings.dateFormat=i,await this.plugin.saveSettings()})),new p.Setting(t).setName("Default Timeline Range").setDesc("Number of months to display by default").addSlider(e=>e.setLimits(1,12,1).setValue(this.plugin.settings.defaultRangeMonths).setDynamicTooltip().onChange(async i=>{this.plugin.settings.defaultRangeMonths=i,await this.plugin.saveSettings()}))}};var T=class{constructor(n){g(this,"vault");this.vault=n}async getAvailableMonths(n,t){let e=new Set,i=this.vault.getMarkdownFiles();for(let s of i)if(this.isInDailyNotesFolder(s.path,n)){let o=this.extractDateFromFilename(s.name,t);if(o){let a=this.parseDate(o);if(a){let l=`${a.getFullYear()}-${a.getMonth()}`;e.add(l)}}}return Array.from(e).sort()}async parseDailyNotes(n,t,e,i){let s=new Map,o=this.vault.getMarkdownFiles();for(let r of o)if(this.isInDailyNotesFolder(r.path,n)){let c=this.extractDateFromFilename(r.name,t);if(c){let h=this.parseDate(c);if(h&&h>=e&&h<=i){let u=await this.extractTasks(r);s.set(c,{date:c,path:r.path,tasks:u})}}}let a=this.getAllDatesInRange(e,i),l=[];for(let r of a)s.has(r)?l.push(s.get(r)):l.push({date:r,path:"",tasks:[]});return l}getAllDatesInRange(n,t){let e=[],i=new Date(n);for(;i<=t;){let s=i.getFullYear(),o=String(i.getMonth()+1).padStart(2,"0"),a=String(i.getDate()).padStart(2,"0");e.push(`${s}-${o}-${a}`),i.setDate(i.getDate()+1)}return e}isInDailyNotesFolder(n,t){return t?n.startsWith(t):!0}extractDateFromFilename(n,t){let e=n.replace(/\.md$/,"");if(t==="YYYY-MM-DD"){let i=e.match(/(\d{4}-\d{2}-\d{2})/);return i?i[1]:null}return e}parseDate(n){try{let[t,e,i]=n.split("-").map(Number);return new Date(t,e-1,i)}catch(t){return null}}async extractTasks(n){let e=(await this.vault.cachedRead(n)).split(`
`),i=[],s=null,o=/^- \[([^\]]+)\]\s+\*(\d{2}:\d{2})\*\s+(.+)$/;for(let a=0;a<e.length;a++){let l=e[a],r=l.match(o);if(r){s&&i.push(s);let[,c,h,u]=r,[D,M]=h.split(":").map(Number);s={status:c,time:h,content:u.trim(),subItems:[],date:this.extractDateFromFilename(n.name,"YYYY-MM-DD")||"",hour:D,minute:M}}else s&&l.trim().startsWith("-")&&l.includes("	")?s.subItems.push(l.trim().substring(1).trim()):s&&!l.trim().startsWith("-")&&l.trim()!==""&&s&&(i.push(s),s=null)}return s&&i.push(s),i}};var S={dailyNotesFolder:"",dateFormat:"YYYY-MM-DD",defaultRangeMonths:1};var w=class extends b.Plugin{constructor(){super(...arguments);g(this,"settings");g(this,"parser")}async onload(){await this.loadSettings(),this.parser=new T(this.app.vault),this.registerView(d,t=>new v(t,this)),this.addRibbonIcon("calendar-clock","Open Daily Notes Timeline",()=>{this.activateView()}),this.addCommand({id:"open-timeline-view",name:"Open Daily Notes Timeline",callback:()=>{this.activateView()}}),this.addSettingTab(new f(this.app,this))}async activateView(){let{workspace:t}=this.app,e=t.getLeavesOfType(d)[0];e||(e=t.getLeaf(!0),await e.setViewState({type:d,active:!0})),t.revealLeaf(e)}async loadSettings(){this.settings=Object.assign({},S,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){this.app.workspace.detachLeavesOfType(d)}};
