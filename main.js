/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var v=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var S=Object.prototype.hasOwnProperty;var F=(c,o,e)=>o in c?v(c,o,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[o]=e;var N=(c,o)=>{for(var e in o)v(c,e,{get:o[e],enumerable:!0})},I=(c,o,e,t)=>{if(o&&typeof o=="object"||typeof o=="function")for(let i of L(o))!S.call(c,i)&&i!==e&&v(c,i,{get:()=>o[i],enumerable:!(t=E(o,i))||t.enumerable});return c};var Y=c=>I(v({},"__esModule",{value:!0}),c);var d=(c,o,e)=>F(c,typeof o!="symbol"?o+"":o,e);var P={};N(P,{default:()=>w});module.exports=Y(P);var k=require("obsidian");var b=require("obsidian");var u="daily-notes-timeline",y=class extends b.ItemView{constructor(e,t){super(e);d(this,"plugin");d(this,"contentEl");d(this,"startDate");d(this,"endDate");d(this,"tooltips",[]);this.plugin=t;let i=new Date;this.startDate=new Date(i.getFullYear(),i.getMonth(),1),this.endDate=new Date(i.getFullYear(),i.getMonth()+1,0)}getViewType(){return u}getDisplayText(){return"Daily Notes Timeline"}getIcon(){return"calendar-clock"}async onOpen(){let e=this.containerEl.children[1];e.empty(),e.addClass("timeline-view-container"),this.contentEl=e.createDiv({cls:"timeline-content"}),await this.renderControls(),await this.renderTimeline()}async onClose(){this.cleanupTooltips(),this.contentEl.empty()}cleanupTooltips(){for(let e of this.tooltips)e.remove();this.tooltips=[]}async renderControls(){let e=this.contentEl.createDiv({cls:"timeline-controls"}),t=e.createDiv({cls:"timeline-controls-left"}),s=e.createDiv({cls:"timeline-controls-right"}).createEl("select",{cls:"dropdown timeline-month-select"});await this.populateMonthSelect(s),s.addEventListener("change",async()=>{let[r,m]=s.value.split("-").map(Number);this.startDate=new Date(r,m,1),this.endDate=new Date(r,m+1,0),await this.renderTimeline()}),t.createEl("button",{text:"\u2190 Previous",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()-1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth(),0),await this.updateMonthSelect(s),await this.renderTimeline()}),t.createEl("button",{text:"Next \u2192",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()+1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth()+2,0),await this.updateMonthSelect(s),await this.renderTimeline()}),t.createEl("button",{text:"Today",cls:"mod-cta"}).addEventListener("click",async()=>{let r=new Date;this.startDate=new Date(r.getFullYear(),r.getMonth(),1),this.endDate=new Date(r.getFullYear(),r.getMonth()+1,0),await this.updateMonthSelect(s),await this.renderTimeline()})}async populateMonthSelect(e){let t=await this.plugin.parser.getAvailableMonths(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat);e.empty();for(let i of t){let[s,n]=i.split("-").map(Number),l=new Date(s,n,1),a=e.createEl("option");a.value=i,a.text=l.toLocaleDateString("en-US",{year:"numeric",month:"long"}),s===this.startDate.getFullYear()&&n===this.startDate.getMonth()&&(a.selected=!0)}}async updateMonthSelect(e){e.value=`${this.startDate.getFullYear()}-${this.startDate.getMonth()}`}async renderTimeline(){this.cleanupTooltips();let e=this.contentEl.querySelector(".timeline-scroll");e&&e.remove();let t=this.contentEl.createDiv({cls:"timeline-scroll"}),i=await this.plugin.parser.parseDailyNotes(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat,this.startDate,this.endDate);if(i.length===0){t.createDiv({cls:"timeline-empty",text:"No date range selected"});return}await this.renderContinuousTimeline(t,i)}async renderContinuousTimeline(e,t){let s=e.createDiv({cls:"timeline-continuous"}).createDiv({cls:"timeline-track-continuous"}),n=200,l=n*t.length;s.style.width=`${l}px`;for(let a=0;a<t.length;a++){let r=t[a];await this.renderDaySegment(s,r,a,t.length,n)}}async renderDaySegment(e,t,i,s,n){let l=e.createDiv({cls:"timeline-segment"});l.style.width=`${n}px`,l.style.left=`${n*i}px`,t.tasks.length===0&&l.addClass("timeline-segment-empty");let a=new Date(t.date);l.createDiv({cls:"timeline-segment-date"}).setText(a.toLocaleDateString("en-US",{month:"short",day:"numeric"})),l.createDiv({cls:"timeline-segment-weekday"}).setText(a.toLocaleDateString("en-US",{weekday:"short"})),l.createDiv({cls:"timeline-segment-time timeline-segment-time-start"}).setText("00:00"),l.createDiv({cls:"timeline-segment-time timeline-segment-time-end"}).setText("23:59");for(let D of t.tasks)await this.renderTaskInSegment(l,D)}async renderTaskInSegment(e,t){let s=(t.hour*60+t.minute)/1440*100,n=e.createDiv({cls:"timeline-task-dot"});n.style.left=`${s}%`,n.setAttribute("data-status",t.status),n.createDiv({cls:"timeline-task-label"}).setText(t.time);let a=document.body.createDiv({cls:"timeline-tooltip"});this.tooltips.push(a);let r=a.createDiv({cls:"timeline-tooltip-content"}),m=r.createDiv({cls:"timeline-tooltip-task"});if(m.textContent=`[${t.status}] `,await this.renderTaskContent(m,t.content),t.subItems.length>0){let h=r.createEl("ul",{cls:"timeline-tooltip-subitems"});for(let p of t.subItems){let D=h.createEl("li");await this.renderTaskContent(D,p)}}n.addEventListener("mouseenter",()=>{let h=n.getBoundingClientRect();a.style.top=`${h.bottom+12}px`,a.style.left=`${h.left+h.width/2}px`,a.style.transform="translateX(-50%)",a.addClass("is-visible")}),n.addEventListener("mouseleave",()=>{a.removeClass("is-visible")}),a.addEventListener("mouseenter",()=>{a.addClass("is-visible")}),a.addEventListener("mouseleave",()=>{a.removeClass("is-visible")})}async renderTaskContent(e,t){let i=/(!\[\[([^\]]+)\]\])|(\[\[([^\]]+)\]\])/g,s=0,n;for(;(n=i.exec(t))!==null;){if(n.index>s&&await this.renderTextWithLinks(e,t.substring(s,n.index)),n[1]){let l=n[2];await this.renderImage(e,l)}else if(n[3]){let l=n[4];this.renderLink(e,l)}s=n.index+n[0].length}s<t.length&&await this.renderTextWithLinks(e,t.substring(s))}async renderTextWithLinks(e,t){let i=e.createSpan();i.textContent=t}renderLink(e,t){let i=e.createEl("a",{cls:"internal-link timeline-tooltip-link",href:"#"});i.textContent=t,i.addEventListener("click",async s=>{s.preventDefault();let n=this.plugin.app.metadataCache.getFirstLinkpathDest(t,"");n&&await this.plugin.app.workspace.getLeaf(!1).openFile(n)})}async renderImage(e,t){let i=this.plugin.app.vault.getAbstractFileByPath(t);if(i&&i instanceof this.plugin.app.vault.adapter.constructor){let n=e.createDiv({cls:"timeline-tooltip-image"}).createEl("img"),l=this.plugin.app.vault.getResourcePath(i);n.src=l,n.alt=t}else{let n=this.plugin.app.vault.getFiles().find(l=>l.name===t||l.path.endsWith(t));if(n){let a=e.createDiv({cls:"timeline-tooltip-image"}).createEl("img"),r=this.plugin.app.vault.getResourcePath(n);a.src=r,a.alt=t}}}};var g=require("obsidian");var f=class extends g.PluginSettingTab{constructor(e,t){super(e,t);d(this,"plugin");this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Daily Notes Timeline Settings"}),new g.Setting(e).setName("Daily Notes Folder").setDesc("Path to your daily notes folder (leave empty for vault root or default daily notes location)").addText(t=>t.setPlaceholder("Daily Notes").setValue(this.plugin.settings.dailyNotesFolder).onChange(async i=>{this.plugin.settings.dailyNotesFolder=i,await this.plugin.saveSettings()})),new g.Setting(e).setName("Date Format").setDesc("Format used in daily note filenames (e.g., YYYY-MM-DD)").addText(t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async i=>{this.plugin.settings.dateFormat=i,await this.plugin.saveSettings()})),new g.Setting(e).setName("Default Timeline Range").setDesc("Number of months to display by default").addSlider(t=>t.setLimits(1,12,1).setValue(this.plugin.settings.defaultRangeMonths).setDynamicTooltip().onChange(async i=>{this.plugin.settings.defaultRangeMonths=i,await this.plugin.saveSettings()}))}};var T=class{constructor(o){d(this,"vault");this.vault=o}async getAvailableMonths(o,e){let t=new Set,i=this.vault.getMarkdownFiles();for(let s of i)if(this.isInDailyNotesFolder(s.path,o)){let n=this.extractDateFromFilename(s.name,e);if(n){let l=this.parseDate(n);if(l){let a=`${l.getFullYear()}-${l.getMonth()}`;t.add(a)}}}return Array.from(t).sort()}async parseDailyNotes(o,e,t,i){let s=new Map,n=this.vault.getMarkdownFiles();for(let r of n)if(this.isInDailyNotesFolder(r.path,o)){let m=this.extractDateFromFilename(r.name,e);if(m){let h=this.parseDate(m);if(h&&h>=t&&h<=i){let p=await this.extractTasks(r);s.set(m,{date:m,path:r.path,tasks:p})}}}let l=this.getAllDatesInRange(t,i),a=[];for(let r of l)s.has(r)?a.push(s.get(r)):a.push({date:r,path:"",tasks:[]});return a}getAllDatesInRange(o,e){let t=[],i=new Date(o);for(;i<=e;){let s=i.getFullYear(),n=String(i.getMonth()+1).padStart(2,"0"),l=String(i.getDate()).padStart(2,"0");t.push(`${s}-${n}-${l}`),i.setDate(i.getDate()+1)}return t}isInDailyNotesFolder(o,e){return e?o.startsWith(e):!0}extractDateFromFilename(o,e){let t=o.replace(/\.md$/,"");if(e==="YYYY-MM-DD"){let i=t.match(/(\d{4}-\d{2}-\d{2})/);return i?i[1]:null}return t}parseDate(o){try{let[e,t,i]=o.split("-").map(Number);return new Date(e,t-1,i)}catch(e){return null}}async extractTasks(o){let t=(await this.vault.cachedRead(o)).split(`
`),i=[],s=null,n=/^- \[([^\]]+)\]\s+\*(\d{2}:\d{2})\*\s+(.+)$/;for(let l=0;l<t.length;l++){let a=t[l],r=a.match(n);if(r){s&&i.push(s);let[,m,h,p]=r,[D,M]=h.split(":").map(Number);s={status:m,time:h,content:p.trim(),subItems:[],date:this.extractDateFromFilename(o.name,"YYYY-MM-DD")||"",hour:D,minute:M}}else s&&a.trim().startsWith("-")&&a.includes("	")?s.subItems.push(a.trim().substring(1).trim()):s&&!a.trim().startsWith("-")&&a.trim()!==""&&s&&(i.push(s),s=null)}return s&&i.push(s),i}};var x={dailyNotesFolder:"",dateFormat:"YYYY-MM-DD",defaultRangeMonths:1};var w=class extends k.Plugin{constructor(){super(...arguments);d(this,"settings");d(this,"parser")}async onload(){await this.loadSettings(),this.parser=new T(this.app.vault),this.registerView(u,e=>new y(e,this)),this.addRibbonIcon("calendar-clock","Open Daily Notes Timeline",()=>{this.activateView()}),this.addCommand({id:"open-timeline-view",name:"Open Daily Notes Timeline",callback:()=>{this.activateView()}}),this.addSettingTab(new f(this.app,this))}async activateView(){let{workspace:e}=this.app,t=e.getLeavesOfType(u)[0];t||(t=e.getLeaf(!0),await t.setViewState({type:u,active:!0})),e.revealLeaf(t)}async loadSettings(){this.settings=Object.assign({},x,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){this.app.workspace.detachLeavesOfType(u)}};
