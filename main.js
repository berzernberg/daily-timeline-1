/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var D=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var F=(c,i,e)=>i in c?D(c,i,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[i]=e;var L=(c,i)=>{for(var e in i)D(c,e,{get:i[e],enumerable:!0})},Y=(c,i,e,t)=>{if(i&&typeof i=="object"||typeof i=="function")for(let s of k(i))!E.call(c,s)&&s!==e&&D(c,s,{get:()=>i[s],enumerable:!(t=M(i,s))||t.enumerable});return c};var I=c=>Y(D({},"__esModule",{value:!0}),c);var d=(c,i,e)=>F(c,typeof i!="symbol"?i+"":i,e);var P={};L(P,{default:()=>f});module.exports=I(P);var N=require("obsidian");var b=require("obsidian");var g="daily-notes-timeline",y=class extends b.ItemView{constructor(e,t){super(e);d(this,"plugin");d(this,"contentEl");d(this,"startDate");d(this,"endDate");this.plugin=t;let s=new Date;this.startDate=new Date(s.getFullYear(),s.getMonth(),1),this.endDate=new Date(s.getFullYear(),s.getMonth()+1,0)}getViewType(){return g}getDisplayText(){return"Daily Notes Timeline"}getIcon(){return"calendar-clock"}async onOpen(){let e=this.containerEl.children[1];e.empty(),e.addClass("timeline-view-container"),this.contentEl=e.createDiv({cls:"timeline-content"}),this.renderControls(),await this.renderTimeline()}async onClose(){this.contentEl.empty()}renderControls(){let e=this.contentEl.createDiv({cls:"timeline-controls"}),t=e.createEl("select",{cls:"dropdown"}),s=new Date().getFullYear();for(let n=s-1;n<=s+1;n++)for(let o=0;o<12;o++){let u=new Date(n,o,1),m=t.createEl("option");m.value=`${n}-${o}`,m.text=u.toLocaleDateString("en-US",{year:"numeric",month:"long"}),n===this.startDate.getFullYear()&&o===this.startDate.getMonth()&&(m.selected=!0)}t.addEventListener("change",async()=>{let[n,o]=t.value.split("-").map(Number);this.startDate=new Date(n,o,1),this.endDate=new Date(n,o+1,0),await this.renderTimeline()}),e.createEl("button",{text:"\u2190 Previous",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()-1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth(),0),await this.updateMonthSelect(t),await this.renderTimeline()}),e.createEl("button",{text:"Next \u2192",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()+1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth()+2,0),await this.updateMonthSelect(t),await this.renderTimeline()}),e.createEl("button",{text:"Today",cls:"mod-cta"}).addEventListener("click",async()=>{let n=new Date;this.startDate=new Date(n.getFullYear(),n.getMonth(),1),this.endDate=new Date(n.getFullYear(),n.getMonth()+1,0),await this.updateMonthSelect(t),await this.renderTimeline()})}async updateMonthSelect(e){e.value=`${this.startDate.getFullYear()}-${this.startDate.getMonth()}`}async renderTimeline(){let e=this.contentEl.querySelector(".timeline-scroll");e&&e.remove();let t=this.contentEl.createDiv({cls:"timeline-scroll"}),s=await this.plugin.parser.parseDailyNotes(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat,this.startDate,this.endDate);if(s.length===0){t.createDiv({cls:"timeline-empty",text:"No date range selected"});return}this.renderContinuousTimeline(t,s)}renderContinuousTimeline(e,t){let a=e.createDiv({cls:"timeline-continuous"}).createDiv({cls:"timeline-track-continuous"});for(let l=0;l<t.length;l++){let r=t[l];this.renderDaySegment(a,r,l,t.length)}}renderDaySegment(e,t,s,a){let l=100/a,r=e.createDiv({cls:"timeline-segment"});r.style.width=`${l}%`,r.style.left=`${l*s}%`,t.tasks.length===0&&r.addClass("timeline-segment-empty");let n=new Date(t.date);r.createDiv({cls:"timeline-segment-date"}).setText(n.toLocaleDateString("en-US",{month:"short",day:"numeric"})),r.createDiv({cls:"timeline-segment-weekday"}).setText(n.toLocaleDateString("en-US",{weekday:"short"})),r.createDiv({cls:"timeline-segment-time timeline-segment-time-start"}).setText("00:00"),r.createDiv({cls:"timeline-segment-time timeline-segment-time-end"}).setText("23:59");for(let w of t.tasks)this.renderTaskInSegment(r,w)}renderTaskInSegment(e,t){let a=(t.hour*60+t.minute)/1440*100,l=e.createDiv({cls:"timeline-task-dot"});l.style.left=`${a}%`,l.setAttribute("data-status",t.status),l.createDiv({cls:"timeline-task-label"}).setText(t.time);let n=l.createDiv({cls:"timeline-tooltip"}),o=n.createDiv({cls:"timeline-tooltip-content"});if(o.createDiv({cls:"timeline-tooltip-task"}).setText(`[${t.status}] ${t.content}`),t.subItems.length>0){let m=o.createEl("ul",{cls:"timeline-tooltip-subitems"});for(let h of t.subItems)m.createEl("li").setText(h)}l.addEventListener("mouseenter",()=>{n.addClass("is-visible")}),l.addEventListener("mouseleave",()=>{n.removeClass("is-visible")})}};var p=require("obsidian");var v=class extends p.PluginSettingTab{constructor(e,t){super(e,t);d(this,"plugin");this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Daily Notes Timeline Settings"}),new p.Setting(e).setName("Daily Notes Folder").setDesc("Path to your daily notes folder (leave empty for vault root or default daily notes location)").addText(t=>t.setPlaceholder("Daily Notes").setValue(this.plugin.settings.dailyNotesFolder).onChange(async s=>{this.plugin.settings.dailyNotesFolder=s,await this.plugin.saveSettings()})),new p.Setting(e).setName("Date Format").setDesc("Format used in daily note filenames (e.g., YYYY-MM-DD)").addText(t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async s=>{this.plugin.settings.dateFormat=s,await this.plugin.saveSettings()})),new p.Setting(e).setName("Default Timeline Range").setDesc("Number of months to display by default").addSlider(t=>t.setLimits(1,12,1).setValue(this.plugin.settings.defaultRangeMonths).setDynamicTooltip().onChange(async s=>{this.plugin.settings.defaultRangeMonths=s,await this.plugin.saveSettings()}))}};var T=class{constructor(i){d(this,"vault");this.vault=i}async parseDailyNotes(i,e,t,s){let a=new Map,l=this.vault.getMarkdownFiles();for(let o of l)if(this.isInDailyNotesFolder(o.path,i)){let u=this.extractDateFromFilename(o.name,e);if(u){let m=this.parseDate(u);if(m&&m>=t&&m<=s){let h=await this.extractTasks(o);a.set(u,{date:u,path:o.path,tasks:h})}}}let r=this.getAllDatesInRange(t,s),n=[];for(let o of r)a.has(o)?n.push(a.get(o)):n.push({date:o,path:"",tasks:[]});return n}getAllDatesInRange(i,e){let t=[],s=new Date(i);for(;s<=e;){let a=s.getFullYear(),l=String(s.getMonth()+1).padStart(2,"0"),r=String(s.getDate()).padStart(2,"0");t.push(`${a}-${l}-${r}`),s.setDate(s.getDate()+1)}return t}isInDailyNotesFolder(i,e){return e?i.startsWith(e):!0}extractDateFromFilename(i,e){let t=i.replace(/\.md$/,"");if(e==="YYYY-MM-DD"){let s=t.match(/(\d{4}-\d{2}-\d{2})/);return s?s[1]:null}return t}parseDate(i){try{let[e,t,s]=i.split("-").map(Number);return new Date(e,t-1,s)}catch(e){return null}}async extractTasks(i){let t=(await this.vault.cachedRead(i)).split(`
`),s=[],a=null,l=/^- \[([^\]]+)\]\s+\*(\d{2}:\d{2})\*\s+(.+)$/;for(let r=0;r<t.length;r++){let n=t[r],o=n.match(l);if(o){a&&s.push(a);let[,u,m,h]=o,[w,x]=m.split(":").map(Number);a={status:u,time:m,content:h.trim(),subItems:[],date:this.extractDateFromFilename(i.name,"YYYY-MM-DD")||"",hour:w,minute:x}}else a&&n.trim().startsWith("-")&&n.includes("	")?a.subItems.push(n.trim().substring(1).trim()):a&&!n.trim().startsWith("-")&&n.trim()!==""&&a&&(s.push(a),a=null)}return a&&s.push(a),s}};var S={dailyNotesFolder:"",dateFormat:"YYYY-MM-DD",defaultRangeMonths:1};var f=class extends N.Plugin{constructor(){super(...arguments);d(this,"settings");d(this,"parser")}async onload(){await this.loadSettings(),this.parser=new T(this.app.vault),this.registerView(g,e=>new y(e,this)),this.addRibbonIcon("calendar-clock","Open Daily Notes Timeline",()=>{this.activateView()}),this.addCommand({id:"open-timeline-view",name:"Open Daily Notes Timeline",callback:()=>{this.activateView()}}),this.addSettingTab(new v(this.app,this))}async activateView(){let{workspace:e}=this.app,t=e.getLeavesOfType(g)[0];t||(t=e.getLeaf(!0),await t.setViewState({type:g,active:!0})),e.revealLeaf(t)}async loadSettings(){this.settings=Object.assign({},S,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){this.app.workspace.detachLeavesOfType(g)}};
