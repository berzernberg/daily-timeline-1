/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DailyNotesTimelinePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// timeline-view.ts
var import_obsidian = require("obsidian");
var VIEW_TYPE_TIMELINE = "daily-notes-timeline";
var ZOOM_CONFIG = {
  MIN: 0.7,
  MAX: 10,
  DEFAULT: 1,
  STEP: 0.5,
  BASE_SEGMENT_WIDTH: 200
};
var TimelineView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    __publicField(this, "plugin");
    __publicField(this, "contentEl");
    __publicField(this, "startDate");
    __publicField(this, "endDate");
    __publicField(this, "tooltips", []);
    __publicField(this, "zoomLevel", ZOOM_CONFIG.DEFAULT);
    __publicField(this, "timelineScrollEl", null);
    __publicField(this, "timelineContainerEl", null);
    __publicField(this, "isDragging", false);
    __publicField(this, "dragStartX", 0);
    __publicField(this, "dragStartScrollLeft", 0);
    __publicField(this, "zoomSlider", null);
    __publicField(this, "zoomLabel", null);
    this.plugin = plugin;
    const now = /* @__PURE__ */ new Date();
    this.startDate = new Date(now.getFullYear(), now.getMonth(), 1);
    this.endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
  }
  getViewType() {
    return VIEW_TYPE_TIMELINE;
  }
  getDisplayText() {
    return "Daily Notes Timeline";
  }
  getIcon() {
    return "calendar-clock";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("timeline-view-container");
    this.contentEl = container.createDiv({ cls: "timeline-content" });
    await this.renderControls();
    await this.renderTimeline();
  }
  async onClose() {
    this.cleanupTooltips();
    this.contentEl.empty();
  }
  cleanupTooltips() {
    for (const tooltip of this.tooltips) {
      tooltip.remove();
    }
    this.tooltips = [];
  }
  async renderControls() {
    const controlsDiv = this.contentEl.createDiv({ cls: "timeline-controls" });
    const leftGroup = controlsDiv.createDiv({ cls: "timeline-controls-left" });
    const centerGroup = controlsDiv.createDiv({ cls: "timeline-controls-center" });
    const rightGroup = controlsDiv.createDiv({ cls: "timeline-controls-right" });
    const monthSelect = rightGroup.createEl("select", { cls: "dropdown timeline-month-select" });
    await this.populateMonthSelect(monthSelect);
    monthSelect.addEventListener("change", async () => {
      const [year, month] = monthSelect.value.split("-").map(Number);
      this.startDate = new Date(year, month, 1);
      this.endDate = new Date(year, month + 1, 0);
      this.zoomLevel = ZOOM_CONFIG.DEFAULT;
      await this.renderTimeline();
      this.updateZoomSlider();
    });
    const prevButton = leftGroup.createEl("button", {
      text: "\u2190 Previous",
      cls: "mod-cta"
    });
    prevButton.addEventListener("click", async () => {
      this.startDate = new Date(
        this.startDate.getFullYear(),
        this.startDate.getMonth() - 1,
        1
      );
      this.endDate = new Date(
        this.endDate.getFullYear(),
        this.endDate.getMonth(),
        0
      );
      this.zoomLevel = ZOOM_CONFIG.DEFAULT;
      await this.updateMonthSelect(monthSelect);
      await this.renderTimeline();
      this.updateZoomSlider();
    });
    const nextButton = leftGroup.createEl("button", {
      text: "Next \u2192",
      cls: "mod-cta"
    });
    nextButton.addEventListener("click", async () => {
      this.startDate = new Date(
        this.startDate.getFullYear(),
        this.startDate.getMonth() + 1,
        1
      );
      this.endDate = new Date(
        this.endDate.getFullYear(),
        this.endDate.getMonth() + 2,
        0
      );
      this.zoomLevel = ZOOM_CONFIG.DEFAULT;
      await this.updateMonthSelect(monthSelect);
      await this.renderTimeline();
      this.updateZoomSlider();
    });
    const todayButton = leftGroup.createEl("button", {
      text: "Today",
      cls: "mod-cta"
    });
    todayButton.addEventListener("click", async () => {
      const now = /* @__PURE__ */ new Date();
      this.startDate = new Date(now.getFullYear(), now.getMonth(), 1);
      this.endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
      this.zoomLevel = ZOOM_CONFIG.DEFAULT;
      await this.updateMonthSelect(monthSelect);
      await this.renderTimeline();
      this.updateZoomSlider();
    });
    this.renderZoomControls(centerGroup);
  }
  renderZoomControls(container) {
    const zoomContainer = container.createDiv({ cls: "timeline-zoom-controls" });
    const zoomOutButton = zoomContainer.createEl("button", {
      cls: "timeline-zoom-button",
      attr: { "aria-label": "Zoom out" }
    });
    zoomOutButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.35-4.35"></path><line x1="8" y1="11" x2="14" y2="11"></line></svg>';
    zoomOutButton.addEventListener("click", () => {
      const newZoom = Math.max(ZOOM_CONFIG.MIN, this.zoomLevel - ZOOM_CONFIG.STEP);
      this.applyZoom(newZoom);
    });
    const sliderContainer = zoomContainer.createDiv({ cls: "timeline-zoom-slider-container" });
    const zoomSlider = sliderContainer.createEl("input", {
      type: "range",
      cls: "timeline-zoom-slider"
    });
    zoomSlider.min = String(ZOOM_CONFIG.MIN * 100);
    zoomSlider.max = String(ZOOM_CONFIG.MAX * 100);
    zoomSlider.value = String(this.zoomLevel * 100);
    zoomSlider.step = String(ZOOM_CONFIG.STEP * 100);
    const zoomLabel = sliderContainer.createDiv({ cls: "timeline-zoom-label" });
    zoomLabel.setText(`${Math.round(this.zoomLevel * 100)}%`);
    const zoomInButton = zoomContainer.createEl("button", {
      cls: "timeline-zoom-button",
      attr: { "aria-label": "Zoom in" }
    });
    zoomInButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.35-4.35"></path><line x1="11" y1="8" x2="11" y2="14"></line><line x1="8" y1="11" x2="14" y2="11"></line></svg>';
    zoomInButton.addEventListener("click", () => {
      const newZoom = Math.min(ZOOM_CONFIG.MAX, this.zoomLevel + ZOOM_CONFIG.STEP);
      this.applyZoom(newZoom);
    });
    zoomSlider.addEventListener("input", () => {
      const newZoomLevel = parseFloat(zoomSlider.value) / 100;
      zoomLabel.setText(`${Math.round(newZoomLevel * 100)}%`);
    });
    zoomSlider.addEventListener("change", () => {
      const newZoomLevel = parseFloat(zoomSlider.value) / 100;
      this.applyZoom(newZoomLevel);
    });
    this.zoomSlider = zoomSlider;
    this.zoomLabel = zoomLabel;
  }
  updateZoomSlider() {
    if (this.zoomSlider) {
      this.zoomSlider.value = String(this.zoomLevel * 100);
    }
    if (this.zoomLabel) {
      this.zoomLabel.setText(`${Math.round(this.zoomLevel * 100)}%`);
    }
  }
  applyZoom(newZoomLevel, anchorX) {
    if (!this.timelineContainerEl) return;
    const scrollContainer = this.timelineContainerEl;
    const scrollLeft = scrollContainer.scrollLeft;
    const containerWidth = scrollContainer.clientWidth;
    const scrollWidth = scrollContainer.scrollWidth;
    let contentAnchorX;
    if (anchorX !== void 0) {
      contentAnchorX = scrollLeft + anchorX;
    } else {
      contentAnchorX = scrollLeft + containerWidth / 2;
    }
    const anchorRatio = contentAnchorX / scrollWidth;
    this.zoomLevel = newZoomLevel;
    this.updateZoomSlider();
    this.renderTimeline().then(() => {
      if (!this.timelineContainerEl) return;
      const newScrollWidth = this.timelineContainerEl.scrollWidth;
      const newContentAnchorX = anchorRatio * newScrollWidth;
      const newScrollLeft = anchorX !== void 0 ? newContentAnchorX - anchorX : newContentAnchorX - containerWidth / 2;
      this.timelineContainerEl.scrollLeft = Math.max(0, newScrollLeft);
    });
  }
  setupTimelineInteractions(timelineContainer) {
    timelineContainer.addEventListener("wheel", (e) => {
      if (e.ctrlKey || e.metaKey) {
        e.preventDefault();
        const rect = timelineContainer.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const delta = -e.deltaY;
        const zoomFactor = delta > 0 ? ZOOM_CONFIG.STEP : -ZOOM_CONFIG.STEP;
        const newZoom = Math.max(
          ZOOM_CONFIG.MIN,
          Math.min(ZOOM_CONFIG.MAX, this.zoomLevel + zoomFactor)
        );
        this.applyZoom(newZoom, mouseX);
      } else {
        e.preventDefault();
        timelineContainer.scrollLeft += e.deltaY;
      }
    });
    timelineContainer.addEventListener("mousedown", (e) => {
      if (e.button !== 0) return;
      const target = e.target;
      if (target.closest(".timeline-task") || target.closest("a")) {
        return;
      }
      e.preventDefault();
      this.isDragging = true;
      this.dragStartX = e.clientX;
      this.dragStartScrollLeft = timelineContainer.scrollLeft;
      timelineContainer.style.cursor = "grabbing";
      timelineContainer.style.userSelect = "none";
    });
    const handleMouseMove = (e) => {
      if (!this.isDragging || !this.timelineContainerEl) return;
      e.preventDefault();
      const deltaX = e.clientX - this.dragStartX;
      this.timelineContainerEl.scrollLeft = this.dragStartScrollLeft - deltaX;
    };
    const handleMouseUp = () => {
      if (this.isDragging && this.timelineContainerEl) {
        this.isDragging = false;
        this.timelineContainerEl.style.cursor = "grab";
        this.timelineContainerEl.style.userSelect = "";
      }
    };
    document.addEventListener("mousemove", handleMouseMove);
    document.addEventListener("mouseup", handleMouseUp);
    timelineContainer.addEventListener("mouseleave", () => {
      if (this.isDragging && this.timelineContainerEl) {
        this.isDragging = false;
        this.timelineContainerEl.style.cursor = "grab";
        this.timelineContainerEl.style.userSelect = "";
      }
    });
  }
  async populateMonthSelect(select) {
    const availableMonths = await this.plugin.parser.getAvailableMonths(
      this.plugin.settings.dailyNotesFolder,
      this.plugin.settings.dateFormat
    );
    select.empty();
    for (const monthKey of availableMonths) {
      const [year, month] = monthKey.split("-").map(Number);
      const date = new Date(year, month, 1);
      const option = select.createEl("option");
      option.value = monthKey;
      option.text = date.toLocaleDateString("en-US", {
        year: "numeric",
        month: "long"
      });
      if (year === this.startDate.getFullYear() && month === this.startDate.getMonth()) {
        option.selected = true;
      }
    }
  }
  async updateMonthSelect(select) {
    select.value = `${this.startDate.getFullYear()}-${this.startDate.getMonth()}`;
  }
  async renderTimeline() {
    this.cleanupTooltips();
    const existingTimeline = this.contentEl.querySelector(".timeline-scroll");
    if (existingTimeline) {
      existingTimeline.remove();
    }
    const timelineScroll = this.contentEl.createDiv({
      cls: "timeline-scroll"
    });
    this.timelineScrollEl = timelineScroll;
    const dailyNotes = await this.plugin.parser.parseDailyNotes(
      this.plugin.settings.dailyNotesFolder,
      this.plugin.settings.dateFormat,
      this.startDate,
      this.endDate
    );
    if (dailyNotes.length === 0) {
      timelineScroll.createDiv({
        cls: "timeline-empty",
        text: "No date range selected"
      });
      return;
    }
    await this.renderContinuousTimeline(timelineScroll, dailyNotes);
  }
  async renderContinuousTimeline(container, dailyNotes) {
    const timelineContainer = container.createDiv({ cls: "timeline-continuous" });
    this.timelineContainerEl = timelineContainer;
    this.setupTimelineInteractions(timelineContainer);
    const timelineTrack = timelineContainer.createDiv({ cls: "timeline-track-continuous" });
    const segmentWidth = ZOOM_CONFIG.BASE_SEGMENT_WIDTH * this.zoomLevel;
    const totalWidth = segmentWidth * dailyNotes.length;
    timelineTrack.style.width = `${totalWidth}px`;
    for (let i = 0; i < dailyNotes.length; i++) {
      const note = dailyNotes[i];
      await this.renderDaySegment(timelineTrack, note, i, dailyNotes.length, segmentWidth);
    }
  }
  async renderDaySegment(track, note, index, total, segmentWidth) {
    const segment = track.createDiv({ cls: "timeline-segment" });
    segment.style.width = `${segmentWidth}px`;
    segment.style.left = `${segmentWidth * index}px`;
    if (note.tasks.length === 0) {
      segment.addClass("timeline-segment-empty");
    }
    const dateObj = new Date(note.date);
    const dateLabel = segment.createDiv({ cls: "timeline-segment-date" });
    dateLabel.setText(
      dateObj.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric"
      })
    );
    const weekdayLabel = segment.createDiv({ cls: "timeline-segment-weekday" });
    weekdayLabel.setText(
      dateObj.toLocaleDateString("en-US", {
        weekday: "short"
      })
    );
    const startLabel = segment.createDiv({ cls: "timeline-segment-time timeline-segment-time-start" });
    startLabel.setText("00:00");
    const endLabel = segment.createDiv({ cls: "timeline-segment-time timeline-segment-time-end" });
    endLabel.setText("23:59");
    const groupedTasks = this.groupOverlappingTasks(note.tasks);
    for (const group of groupedTasks) {
      await this.renderTaskGroup(segment, group);
    }
  }
  groupOverlappingTasks(tasks) {
    if (tasks.length === 0) return [];
    const sortedTasks = [...tasks].sort((a, b) => {
      const aMinutes = a.hour * 60 + a.minute;
      const bMinutes = b.hour * 60 + b.minute;
      return aMinutes - bMinutes;
    });
    const groups = [];
    const OVERLAP_THRESHOLD = 1.5;
    for (const task of sortedTasks) {
      const taskPercentage = (task.hour * 60 + task.minute) / (24 * 60) * 100;
      let addedToGroup = false;
      for (const group of groups) {
        const groupPercentage = (group[0].hour * 60 + group[0].minute) / (24 * 60) * 100;
        if (Math.abs(taskPercentage - groupPercentage) < OVERLAP_THRESHOLD) {
          group.push(task);
          addedToGroup = true;
          break;
        }
      }
      if (!addedToGroup) {
        groups.push([task]);
      }
    }
    return groups;
  }
  getTagStyle(tag) {
    if (!tag) return null;
    return this.plugin.settings.tagStyles.find((style) => style.tag === tag);
  }
  async renderTaskGroup(segment, group) {
    const firstTask = group[0];
    const totalMinutes = firstTask.hour * 60 + firstTask.minute;
    const percentage = totalMinutes / (24 * 60) * 100;
    const taskDotContainer = segment.createDiv({ cls: "timeline-task-dot-container" });
    taskDotContainer.style.left = `${percentage}%`;
    const taskDot = taskDotContainer.createDiv({ cls: "timeline-task-dot" });
    taskDot.setAttribute("data-status", firstTask.status);
    const tagStyle = this.getTagStyle(firstTask.firstTag);
    if (tagStyle && tagStyle.color) {
      taskDot.addClass("timeline-task-dot-custom");
      taskDot.style.setProperty("background-color", tagStyle.color, "important");
    }
    if (group.length > 1) {
      const badge = taskDot.createDiv({ cls: "timeline-task-badge" });
      badge.setText(group.length.toString());
    } else {
      const taskLabel = taskDot.createDiv({ cls: "timeline-task-label" });
      taskLabel.setText(firstTask.time);
    }
    if (tagStyle && tagStyle.emoji) {
      const emojiEl = taskDotContainer.createDiv({ cls: "timeline-task-emoji" });
      emojiEl.setText(tagStyle.emoji);
    }
    const tooltips = [];
    for (const task of group) {
      const tooltip = document.body.createDiv({ cls: "timeline-tooltip" });
      this.tooltips.push(tooltip);
      tooltips.push(tooltip);
      const tooltipContent = tooltip.createDiv({ cls: "timeline-tooltip-content" });
      const taskText = tooltipContent.createDiv({ cls: "timeline-tooltip-task" });
      taskText.textContent = `[${task.status}] `;
      await this.renderTaskContent(taskText, task.content);
      if (task.subItems.length > 0) {
        const subList = tooltipContent.createEl("ul", { cls: "timeline-tooltip-subitems" });
        for (const subItem of task.subItems) {
          const listItem = subList.createEl("li");
          await this.renderTaskContent(listItem, subItem);
        }
      }
    }
    taskDotContainer.addEventListener("mouseenter", () => {
      const rect = taskDotContainer.getBoundingClientRect();
      let offsetTop = rect.bottom + 12;
      for (const tooltip of tooltips) {
        tooltip.style.top = `${offsetTop}px`;
        tooltip.style.left = `${rect.left + rect.width / 2}px`;
        tooltip.style.transform = "translateX(-50%)";
        tooltip.addClass("is-visible");
        offsetTop += tooltip.offsetHeight + 8;
      }
      taskDotContainer.style.zIndex = "100";
    });
    taskDotContainer.addEventListener("mouseleave", () => {
      for (const tooltip of tooltips) {
        tooltip.removeClass("is-visible");
      }
      taskDotContainer.style.zIndex = "2";
    });
    for (const tooltip of tooltips) {
      tooltip.addEventListener("mouseenter", () => {
        for (const t of tooltips) {
          t.addClass("is-visible");
        }
      });
      tooltip.addEventListener("mouseleave", () => {
        for (const t of tooltips) {
          t.removeClass("is-visible");
        }
      });
    }
  }
  async renderTaskInSegment(segment, task) {
    const totalMinutes = task.hour * 60 + task.minute;
    const percentage = totalMinutes / (24 * 60) * 100;
    const taskDotContainer = segment.createDiv({ cls: "timeline-task-dot-container" });
    taskDotContainer.style.left = `${percentage}%`;
    const taskDot = taskDotContainer.createDiv({ cls: "timeline-task-dot" });
    taskDot.setAttribute("data-status", task.status);
    const tagStyle = this.getTagStyle(task.firstTag);
    if (tagStyle && tagStyle.color) {
      taskDot.addClass("timeline-task-dot-custom");
      taskDot.style.setProperty("background-color", tagStyle.color, "important");
    }
    const taskLabel = taskDot.createDiv({ cls: "timeline-task-label" });
    taskLabel.setText(task.time);
    if (tagStyle && tagStyle.emoji) {
      const emojiEl = taskDotContainer.createDiv({ cls: "timeline-task-emoji" });
      emojiEl.setText(tagStyle.emoji);
    }
    const tooltip = document.body.createDiv({ cls: "timeline-tooltip" });
    this.tooltips.push(tooltip);
    const tooltipContent = tooltip.createDiv({ cls: "timeline-tooltip-content" });
    const taskText = tooltipContent.createDiv({ cls: "timeline-tooltip-task" });
    taskText.textContent = `[${task.status}] `;
    await this.renderTaskContent(taskText, task.content);
    if (task.subItems.length > 0) {
      const subList = tooltipContent.createEl("ul", { cls: "timeline-tooltip-subitems" });
      for (const subItem of task.subItems) {
        const listItem = subList.createEl("li");
        await this.renderTaskContent(listItem, subItem);
      }
    }
    taskDotContainer.addEventListener("mouseenter", () => {
      const rect = taskDotContainer.getBoundingClientRect();
      tooltip.style.top = `${rect.bottom + 12}px`;
      tooltip.style.left = `${rect.left + rect.width / 2}px`;
      tooltip.style.transform = "translateX(-50%)";
      tooltip.addClass("is-visible");
    });
    taskDotContainer.addEventListener("mouseleave", () => {
      tooltip.removeClass("is-visible");
    });
    tooltip.addEventListener("mouseenter", () => {
      tooltip.addClass("is-visible");
    });
    tooltip.addEventListener("mouseleave", () => {
      tooltip.removeClass("is-visible");
    });
  }
  async renderTaskContent(container, content) {
    const combinedRegex = /(!\[\[([^\]]+)\]\])|(\[\[([^\]]+)\]\])/g;
    let lastIndex = 0;
    let match;
    while ((match = combinedRegex.exec(content)) !== null) {
      if (match.index > lastIndex) {
        await this.renderTextWithLinks(container, content.substring(lastIndex, match.index));
      }
      if (match[1]) {
        const imageName = match[2];
        await this.renderImage(container, imageName);
      } else if (match[3]) {
        const linkText = match[4];
        this.renderLink(container, linkText);
      }
      lastIndex = match.index + match[0].length;
    }
    if (lastIndex < content.length) {
      await this.renderTextWithLinks(container, content.substring(lastIndex));
    }
  }
  async renderTextWithLinks(container, text) {
    const textSpan = container.createSpan();
    textSpan.textContent = text;
  }
  renderLink(container, linkText) {
    const link = container.createEl("a", {
      cls: "internal-link timeline-tooltip-link",
      href: "#"
    });
    link.textContent = linkText;
    link.addEventListener("click", async (e) => {
      e.preventDefault();
      const file = this.plugin.app.metadataCache.getFirstLinkpathDest(linkText, "");
      if (file) {
        await this.plugin.app.workspace.getLeaf(false).openFile(file);
      }
    });
  }
  async renderImage(container, imageName) {
    const imageFile = this.plugin.app.vault.getAbstractFileByPath(imageName);
    if (imageFile && imageFile instanceof this.plugin.app.vault.adapter.constructor) {
      const imageContainer = container.createDiv({ cls: "timeline-tooltip-image" });
      const img = imageContainer.createEl("img");
      const resourcePath = this.plugin.app.vault.getResourcePath(imageFile);
      img.src = resourcePath;
      img.alt = imageName;
    } else {
      const files = this.plugin.app.vault.getFiles();
      const matchedFile = files.find((f) => f.name === imageName || f.path.endsWith(imageName));
      if (matchedFile) {
        const imageContainer = container.createDiv({ cls: "timeline-tooltip-image" });
        const img = imageContainer.createEl("img");
        const resourcePath = this.plugin.app.vault.getResourcePath(matchedFile);
        img.src = resourcePath;
        img.alt = imageName;
      }
    }
  }
};

// settings.ts
var import_obsidian2 = require("obsidian");
var TimelineSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    __publicField(this, "plugin");
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Daily Notes Timeline Settings" });
    new import_obsidian2.Setting(containerEl).setName("Daily Notes Folder").setDesc(
      "Path to your daily notes folder (leave empty for vault root or default daily notes location)"
    ).addText(
      (text) => text.setPlaceholder("Daily Notes").setValue(this.plugin.settings.dailyNotesFolder).onChange(async (value) => {
        this.plugin.settings.dailyNotesFolder = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Date Format").setDesc("Format used in daily note filenames (e.g., YYYY-MM-DD)").addText(
      (text) => text.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async (value) => {
        this.plugin.settings.dateFormat = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Default Timeline Range").setDesc("Number of months to display by default").addSlider(
      (slider) => slider.setLimits(1, 12, 1).setValue(this.plugin.settings.defaultRangeMonths).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.defaultRangeMonths = value;
        await this.plugin.saveSettings();
      })
    );
    containerEl.createEl("h2", { text: "Tag Styles" });
    containerEl.createEl("p", {
      text: "Customize the appearance of timeline points based on the first hashtag in each task.",
      cls: "setting-item-description"
    });
    this.displayTagStylesList(containerEl);
    this.displayAddTagStyleForm(containerEl);
  }
  displayTagStylesList(containerEl) {
    const listContainer = containerEl.createDiv({ cls: "tag-styles-list" });
    if (this.plugin.settings.tagStyles.length === 0) {
      listContainer.createEl("p", {
        text: "No tag styles configured yet. Add one below.",
        cls: "setting-item-description"
      });
      return;
    }
    this.plugin.settings.tagStyles.forEach((preset, index) => {
      const presetContainer = listContainer.createDiv({ cls: "tag-style-preset" });
      const infoDiv = presetContainer.createDiv({ cls: "tag-style-info" });
      const colorSwatch = infoDiv.createDiv({ cls: "tag-style-color-swatch" });
      colorSwatch.style.backgroundColor = preset.color;
      const tagName = infoDiv.createSpan({ cls: "tag-style-tag-name" });
      tagName.setText(`#${preset.tag}`);
      if (preset.emoji) {
        const emojiPreview = infoDiv.createSpan({ cls: "tag-style-emoji-preview" });
        emojiPreview.setText(preset.emoji);
      }
      const actionsDiv = presetContainer.createDiv({ cls: "tag-style-actions" });
      const editButton = actionsDiv.createEl("button", { text: "Edit", cls: "mod-cta" });
      editButton.addEventListener("click", () => {
        this.editTagStyle(index, preset);
      });
      const deleteButton = actionsDiv.createEl("button", { text: "Delete", cls: "mod-warning" });
      deleteButton.addEventListener("click", async () => {
        this.plugin.settings.tagStyles.splice(index, 1);
        await this.plugin.saveSettings();
        this.display();
      });
    });
  }
  displayAddTagStyleForm(containerEl) {
    containerEl.createEl("h3", { text: "Add New Tag Style" });
    const formContainer = containerEl.createDiv({ cls: "tag-style-form" });
    let tagInput;
    let colorInput;
    let emojiInput;
    new import_obsidian2.Setting(formContainer).setName("Tag Name").setDesc("Enter tag name without the # symbol (e.g., 'log' for #log, or 'log/work' for #log/work)").addText((text) => {
      tagInput = text.inputEl;
      text.setPlaceholder("log/work");
    });
    new import_obsidian2.Setting(formContainer).setName("Color").setDesc("Choose a color for the timeline point").addColorPicker((color) => {
      colorInput = color.colorPickerEl;
      color.setValue("#3b82f6");
    });
    new import_obsidian2.Setting(formContainer).setName("Emoji (Optional)").setDesc("Enter an emoji to display below the timeline point").addText((text) => {
      emojiInput = text.inputEl;
      text.setPlaceholder("\u{1F4DD}");
    });
    new import_obsidian2.Setting(formContainer).addButton(
      (button) => button.setButtonText("Add Style").setCta().onClick(async () => {
        const tag = tagInput.value.trim().toLowerCase();
        const color = colorInput.value;
        const emoji = emojiInput.value.trim();
        if (!tag) {
          alert("Please enter a tag name");
          return;
        }
        if (this.plugin.settings.tagStyles.some((s) => s.tag === tag)) {
          alert(`A style for tag "${tag}" already exists`);
          return;
        }
        this.plugin.settings.tagStyles.push({ tag, color, emoji });
        await this.plugin.saveSettings();
        this.display();
      })
    );
  }
  editTagStyle(index, preset) {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Edit Tag Style" });
    const formContainer = containerEl.createDiv({ cls: "tag-style-form" });
    let tagInput;
    let colorInput;
    let emojiInput;
    new import_obsidian2.Setting(formContainer).setName("Tag Name").setDesc("Tag name without the # symbol").addText((text) => {
      tagInput = text.inputEl;
      text.setValue(preset.tag);
    });
    new import_obsidian2.Setting(formContainer).setName("Color").setDesc("Choose a color for the timeline point").addColorPicker((color) => {
      colorInput = color.colorPickerEl;
      color.setValue(preset.color);
    });
    new import_obsidian2.Setting(formContainer).setName("Emoji (Optional)").setDesc("Enter an emoji to display below the timeline point").addText((text) => {
      emojiInput = text.inputEl;
      text.setValue(preset.emoji || "");
    });
    new import_obsidian2.Setting(formContainer).addButton(
      (button) => button.setButtonText("Save").setCta().onClick(async () => {
        const tag = tagInput.value.trim().toLowerCase();
        const color = colorInput.value;
        const emoji = emojiInput.value.trim();
        if (!tag) {
          alert("Please enter a tag name");
          return;
        }
        const existingIndex = this.plugin.settings.tagStyles.findIndex((s) => s.tag === tag);
        if (existingIndex !== -1 && existingIndex !== index) {
          alert(`A style for tag "${tag}" already exists`);
          return;
        }
        this.plugin.settings.tagStyles[index] = { tag, color, emoji };
        await this.plugin.saveSettings();
        this.display();
      })
    ).addButton(
      (button) => button.setButtonText("Cancel").onClick(() => {
        this.display();
      })
    );
  }
};

// parser.ts
var DailyNotesParser = class {
  constructor(vault) {
    __publicField(this, "vault");
    this.vault = vault;
  }
  async getAvailableMonths(folderPath, dateFormat) {
    const monthsSet = /* @__PURE__ */ new Set();
    const files = this.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.isInDailyNotesFolder(file.path, folderPath)) {
        const dateStr = this.extractDateFromFilename(file.name, dateFormat);
        if (dateStr) {
          const noteDate = this.parseDate(dateStr);
          if (noteDate) {
            const monthKey = `${noteDate.getFullYear()}-${noteDate.getMonth()}`;
            monthsSet.add(monthKey);
          }
        }
      }
    }
    return Array.from(monthsSet).sort();
  }
  async parseDailyNotes(folderPath, dateFormat, startDate, endDate) {
    const dailyNotesMap = /* @__PURE__ */ new Map();
    const files = this.vault.getMarkdownFiles();
    for (const file of files) {
      if (this.isInDailyNotesFolder(file.path, folderPath)) {
        const dateStr = this.extractDateFromFilename(file.name, dateFormat);
        if (dateStr) {
          const noteDate = this.parseDate(dateStr);
          if (noteDate && noteDate >= startDate && noteDate <= endDate) {
            const tasks = await this.extractTasks(file);
            dailyNotesMap.set(dateStr, {
              date: dateStr,
              path: file.path,
              tasks
            });
          }
        }
      }
    }
    const allDates = this.getAllDatesInRange(startDate, endDate);
    const dailyNotes = [];
    for (const dateStr of allDates) {
      if (dailyNotesMap.has(dateStr)) {
        dailyNotes.push(dailyNotesMap.get(dateStr));
      } else {
        dailyNotes.push({
          date: dateStr,
          path: "",
          tasks: []
        });
      }
    }
    return dailyNotes;
  }
  getAllDatesInRange(startDate, endDate) {
    const dates = [];
    const current = new Date(startDate);
    while (current <= endDate) {
      const year = current.getFullYear();
      const month = String(current.getMonth() + 1).padStart(2, "0");
      const day = String(current.getDate()).padStart(2, "0");
      dates.push(`${year}-${month}-${day}`);
      current.setDate(current.getDate() + 1);
    }
    return dates;
  }
  isInDailyNotesFolder(filePath, folderPath) {
    if (!folderPath) return true;
    return filePath.startsWith(folderPath);
  }
  extractDateFromFilename(filename, dateFormat) {
    const nameWithoutExt = filename.replace(/\.md$/, "");
    if (dateFormat === "YYYY-MM-DD") {
      const match = nameWithoutExt.match(/(\d{4}-\d{2}-\d{2})/);
      return match ? match[1] : null;
    }
    return nameWithoutExt;
  }
  parseDate(dateStr) {
    try {
      const [year, month, day] = dateStr.split("-").map(Number);
      return new Date(year, month - 1, day);
    } catch (e) {
      return null;
    }
  }
  extractFirstTag(content) {
    const tagRegex = /#([\p{L}\p{N}_/-]+)/u;
    const match = content.match(tagRegex);
    return match ? match[1].toLowerCase() : void 0;
  }
  async extractTasks(file) {
    const content = await this.vault.cachedRead(file);
    const lines = content.split("\n");
    const tasks = [];
    let currentTask = null;
    const taskRegex = /^- \[([^\]]+)\]\s+\*(\d{2}:\d{2})\*\s+(.+)$/;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const match = line.match(taskRegex);
      if (match) {
        if (currentTask) {
          tasks.push(currentTask);
        }
        const [, status, time, content2] = match;
        const [hour, minute] = time.split(":").map(Number);
        const firstTag = this.extractFirstTag(content2);
        currentTask = {
          status,
          time,
          content: content2.trim(),
          subItems: [],
          date: this.extractDateFromFilename(file.name, "YYYY-MM-DD") || "",
          hour,
          minute,
          firstTag
        };
      } else if (currentTask && line.trim().startsWith("-") && line.includes("	")) {
        currentTask.subItems.push(line.trim().substring(1).trim());
      } else if (currentTask && !line.trim().startsWith("-") && line.trim() !== "") {
        if (currentTask) {
          tasks.push(currentTask);
          currentTask = null;
        }
      }
    }
    if (currentTask) {
      tasks.push(currentTask);
    }
    return tasks;
  }
};

// types.ts
var DEFAULT_SETTINGS = {
  dailyNotesFolder: "",
  dateFormat: "YYYY-MM-DD",
  defaultRangeMonths: 1,
  tagStyles: []
};

// main.ts
var DailyNotesTimelinePlugin = class extends import_obsidian3.Plugin {
  constructor() {
    super(...arguments);
    __publicField(this, "settings");
    __publicField(this, "parser");
  }
  async onload() {
    await this.loadSettings();
    this.parser = new DailyNotesParser(this.app.vault);
    this.registerView(
      VIEW_TYPE_TIMELINE,
      (leaf) => new TimelineView(leaf, this)
    );
    this.addRibbonIcon("calendar-clock", "Open Daily Notes Timeline", () => {
      this.activateView();
    });
    this.addCommand({
      id: "open-timeline-view",
      name: "Open Daily Notes Timeline",
      callback: () => {
        this.activateView();
      }
    });
    this.addSettingTab(new TimelineSettingTab(this.app, this));
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_TIMELINE)[0];
    if (!leaf) {
      leaf = workspace.getLeaf(true);
      await leaf.setViewState({
        type: VIEW_TYPE_TIMELINE,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_TIMELINE);
  }
};
