/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var D=Object.defineProperty;var M=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var F=(c,n,e)=>n in c?D(c,n,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[n]=e;var L=(c,n)=>{for(var e in n)D(c,e,{get:n[e],enumerable:!0})},Y=(c,n,e,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let s of k(n))!E.call(c,s)&&s!==e&&D(c,s,{get:()=>n[s],enumerable:!(t=M(n,s))||t.enumerable});return c};var I=c=>Y(D({},"__esModule",{value:!0}),c);var d=(c,n,e)=>F(c,typeof n!="symbol"?n+"":n,e);var P={};L(P,{default:()=>f});module.exports=I(P);var S=require("obsidian");var b=require("obsidian");var g="daily-notes-timeline",y=class extends b.ItemView{constructor(e,t){super(e);d(this,"plugin");d(this,"contentEl");d(this,"startDate");d(this,"endDate");this.plugin=t;let s=new Date;this.startDate=new Date(s.getFullYear(),s.getMonth(),1),this.endDate=new Date(s.getFullYear(),s.getMonth()+1,0)}getViewType(){return g}getDisplayText(){return"Daily Notes Timeline"}getIcon(){return"calendar-clock"}async onOpen(){let e=this.containerEl.children[1];e.empty(),e.addClass("timeline-view-container"),this.contentEl=e.createDiv({cls:"timeline-content"}),this.renderControls(),await this.renderTimeline()}async onClose(){this.contentEl.empty()}renderControls(){let e=this.contentEl.createDiv({cls:"timeline-controls"}),t=e.createEl("select",{cls:"dropdown"}),s=new Date().getFullYear();for(let i=s-1;i<=s+1;i++)for(let a=0;a<12;a++){let u=new Date(i,a,1),m=t.createEl("option");m.value=`${i}-${a}`,m.text=u.toLocaleDateString("en-US",{year:"numeric",month:"long"}),i===this.startDate.getFullYear()&&a===this.startDate.getMonth()&&(m.selected=!0)}t.addEventListener("change",async()=>{let[i,a]=t.value.split("-").map(Number);this.startDate=new Date(i,a,1),this.endDate=new Date(i,a+1,0),await this.renderTimeline()}),e.createEl("button",{text:"\u2190 Previous",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()-1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth(),0),await this.updateMonthSelect(t),await this.renderTimeline()}),e.createEl("button",{text:"Next \u2192",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()+1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth()+2,0),await this.updateMonthSelect(t),await this.renderTimeline()}),e.createEl("button",{text:"Today",cls:"mod-cta"}).addEventListener("click",async()=>{let i=new Date;this.startDate=new Date(i.getFullYear(),i.getMonth(),1),this.endDate=new Date(i.getFullYear(),i.getMonth()+1,0),await this.updateMonthSelect(t),await this.renderTimeline()})}async updateMonthSelect(e){e.value=`${this.startDate.getFullYear()}-${this.startDate.getMonth()}`}async renderTimeline(){let e=this.contentEl.querySelector(".timeline-scroll");e&&e.remove();let t=this.contentEl.createDiv({cls:"timeline-scroll"}),s=await this.plugin.parser.parseDailyNotes(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat,this.startDate,this.endDate);if(s.length===0){t.createDiv({cls:"timeline-empty",text:"No date range selected"});return}this.renderContinuousTimeline(t,s)}renderContinuousTimeline(e,t){let o=e.createDiv({cls:"timeline-continuous"}).createDiv({cls:"timeline-track-continuous"}),r=200,l=r*t.length;o.style.width=`${l}px`;for(let i=0;i<t.length;i++){let a=t[i];this.renderDaySegment(o,a,i,t.length,r)}}renderDaySegment(e,t,s,o,r){let l=e.createDiv({cls:"timeline-segment"});l.style.width=`${r}px`,l.style.left=`${r*s}px`,t.tasks.length===0&&l.addClass("timeline-segment-empty");let i=new Date(t.date);l.createDiv({cls:"timeline-segment-date"}).setText(i.toLocaleDateString("en-US",{month:"short",day:"numeric"})),l.createDiv({cls:"timeline-segment-weekday"}).setText(i.toLocaleDateString("en-US",{weekday:"short"})),l.createDiv({cls:"timeline-segment-time timeline-segment-time-start"}).setText("00:00"),l.createDiv({cls:"timeline-segment-time timeline-segment-time-end"}).setText("23:59");for(let w of t.tasks)this.renderTaskInSegment(l,w)}renderTaskInSegment(e,t){let o=(t.hour*60+t.minute)/1440*100,r=e.createDiv({cls:"timeline-task-dot"});r.style.left=`${o}%`,r.setAttribute("data-status",t.status),r.createDiv({cls:"timeline-task-label"}).setText(t.time);let i=r.createDiv({cls:"timeline-tooltip"}),a=i.createDiv({cls:"timeline-tooltip-content"});if(a.createDiv({cls:"timeline-tooltip-task"}).setText(`[${t.status}] ${t.content}`),t.subItems.length>0){let m=a.createEl("ul",{cls:"timeline-tooltip-subitems"});for(let h of t.subItems)m.createEl("li").setText(h)}r.addEventListener("mouseenter",()=>{i.addClass("is-visible")}),r.addEventListener("mouseleave",()=>{i.removeClass("is-visible")})}};var p=require("obsidian");var v=class extends p.PluginSettingTab{constructor(e,t){super(e,t);d(this,"plugin");this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Daily Notes Timeline Settings"}),new p.Setting(e).setName("Daily Notes Folder").setDesc("Path to your daily notes folder (leave empty for vault root or default daily notes location)").addText(t=>t.setPlaceholder("Daily Notes").setValue(this.plugin.settings.dailyNotesFolder).onChange(async s=>{this.plugin.settings.dailyNotesFolder=s,await this.plugin.saveSettings()})),new p.Setting(e).setName("Date Format").setDesc("Format used in daily note filenames (e.g., YYYY-MM-DD)").addText(t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async s=>{this.plugin.settings.dateFormat=s,await this.plugin.saveSettings()})),new p.Setting(e).setName("Default Timeline Range").setDesc("Number of months to display by default").addSlider(t=>t.setLimits(1,12,1).setValue(this.plugin.settings.defaultRangeMonths).setDynamicTooltip().onChange(async s=>{this.plugin.settings.defaultRangeMonths=s,await this.plugin.saveSettings()}))}};var T=class{constructor(n){d(this,"vault");this.vault=n}async parseDailyNotes(n,e,t,s){let o=new Map,r=this.vault.getMarkdownFiles();for(let a of r)if(this.isInDailyNotesFolder(a.path,n)){let u=this.extractDateFromFilename(a.name,e);if(u){let m=this.parseDate(u);if(m&&m>=t&&m<=s){let h=await this.extractTasks(a);o.set(u,{date:u,path:a.path,tasks:h})}}}let l=this.getAllDatesInRange(t,s),i=[];for(let a of l)o.has(a)?i.push(o.get(a)):i.push({date:a,path:"",tasks:[]});return i}getAllDatesInRange(n,e){let t=[],s=new Date(n);for(;s<=e;){let o=s.getFullYear(),r=String(s.getMonth()+1).padStart(2,"0"),l=String(s.getDate()).padStart(2,"0");t.push(`${o}-${r}-${l}`),s.setDate(s.getDate()+1)}return t}isInDailyNotesFolder(n,e){return e?n.startsWith(e):!0}extractDateFromFilename(n,e){let t=n.replace(/\.md$/,"");if(e==="YYYY-MM-DD"){let s=t.match(/(\d{4}-\d{2}-\d{2})/);return s?s[1]:null}return t}parseDate(n){try{let[e,t,s]=n.split("-").map(Number);return new Date(e,t-1,s)}catch(e){return null}}async extractTasks(n){let t=(await this.vault.cachedRead(n)).split(`
`),s=[],o=null,r=/^- \[([^\]]+)\]\s+\*(\d{2}:\d{2})\*\s+(.+)$/;for(let l=0;l<t.length;l++){let i=t[l],a=i.match(r);if(a){o&&s.push(o);let[,u,m,h]=a,[w,N]=m.split(":").map(Number);o={status:u,time:m,content:h.trim(),subItems:[],date:this.extractDateFromFilename(n.name,"YYYY-MM-DD")||"",hour:w,minute:N}}else o&&i.trim().startsWith("-")&&i.includes("	")?o.subItems.push(i.trim().substring(1).trim()):o&&!i.trim().startsWith("-")&&i.trim()!==""&&o&&(s.push(o),o=null)}return o&&s.push(o),s}};var x={dailyNotesFolder:"",dateFormat:"YYYY-MM-DD",defaultRangeMonths:1};var f=class extends S.Plugin{constructor(){super(...arguments);d(this,"settings");d(this,"parser")}async onload(){await this.loadSettings(),this.parser=new T(this.app.vault),this.registerView(g,e=>new y(e,this)),this.addRibbonIcon("calendar-clock","Open Daily Notes Timeline",()=>{this.activateView()}),this.addCommand({id:"open-timeline-view",name:"Open Daily Notes Timeline",callback:()=>{this.activateView()}}),this.addSettingTab(new v(this.app,this))}async activateView(){let{workspace:e}=this.app,t=e.getLeavesOfType(g)[0];t||(t=e.getLeaf(!0),await t.setViewState({type:g,active:!0})),e.revealLeaf(t)}async loadSettings(){this.settings=Object.assign({},x,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){this.app.workspace.detachLeavesOfType(g)}};
