/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var y=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var E=Object.prototype.hasOwnProperty;var L=(c,a,e)=>a in c?y(c,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):c[a]=e;var N=(c,a)=>{for(var e in a)y(c,e,{get:a[e],enumerable:!0})},I=(c,a,e,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of F(a))!E.call(c,i)&&i!==e&&y(c,i,{get:()=>a[i],enumerable:!(t=S(a,i))||t.enumerable});return c};var Y=c=>I(y({},"__esModule",{value:!0}),c);var d=(c,a,e)=>L(c,typeof a!="symbol"?a+"":a,e);var P={};N(P,{default:()=>w});module.exports=Y(P);var k=require("obsidian");var x=require("obsidian");var u="daily-notes-timeline",v=class extends x.ItemView{constructor(e,t){super(e);d(this,"plugin");d(this,"contentEl");d(this,"startDate");d(this,"endDate");this.plugin=t;let i=new Date;this.startDate=new Date(i.getFullYear(),i.getMonth(),1),this.endDate=new Date(i.getFullYear(),i.getMonth()+1,0)}getViewType(){return u}getDisplayText(){return"Daily Notes Timeline"}getIcon(){return"calendar-clock"}async onOpen(){let e=this.containerEl.children[1];e.empty(),e.addClass("timeline-view-container"),this.contentEl=e.createDiv({cls:"timeline-content"}),await this.renderControls(),await this.renderTimeline()}async onClose(){this.contentEl.empty()}async renderControls(){let e=this.contentEl.createDiv({cls:"timeline-controls"}),t=e.createDiv({cls:"timeline-controls-left"}),s=e.createDiv({cls:"timeline-controls-right"}).createEl("select",{cls:"dropdown timeline-month-select"});await this.populateMonthSelect(s),s.addEventListener("change",async()=>{let[r,m]=s.value.split("-").map(Number);this.startDate=new Date(r,m,1),this.endDate=new Date(r,m+1,0),await this.renderTimeline()}),t.createEl("button",{text:"\u2190 Previous",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()-1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth(),0),await this.updateMonthSelect(s),await this.renderTimeline()}),t.createEl("button",{text:"Next \u2192",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()+1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth()+2,0),await this.updateMonthSelect(s),await this.renderTimeline()}),t.createEl("button",{text:"Today",cls:"mod-cta"}).addEventListener("click",async()=>{let r=new Date;this.startDate=new Date(r.getFullYear(),r.getMonth(),1),this.endDate=new Date(r.getFullYear(),r.getMonth()+1,0),await this.updateMonthSelect(s),await this.renderTimeline()})}async populateMonthSelect(e){let t=await this.plugin.parser.getAvailableMonths(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat);e.empty();for(let i of t){let[s,n]=i.split("-").map(Number),o=new Date(s,n,1),l=e.createEl("option");l.value=i,l.text=o.toLocaleDateString("en-US",{year:"numeric",month:"long"}),s===this.startDate.getFullYear()&&n===this.startDate.getMonth()&&(l.selected=!0)}}async updateMonthSelect(e){e.value=`${this.startDate.getFullYear()}-${this.startDate.getMonth()}`}async renderTimeline(){let e=this.contentEl.querySelector(".timeline-scroll");e&&e.remove();let t=this.contentEl.createDiv({cls:"timeline-scroll"}),i=await this.plugin.parser.parseDailyNotes(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat,this.startDate,this.endDate);if(i.length===0){t.createDiv({cls:"timeline-empty",text:"No date range selected"});return}await this.renderContinuousTimeline(t,i)}async renderContinuousTimeline(e,t){let s=e.createDiv({cls:"timeline-continuous"}).createDiv({cls:"timeline-track-continuous"}),n=200,o=n*t.length;s.style.width=`${o}px`;for(let l=0;l<t.length;l++){let r=t[l];await this.renderDaySegment(s,r,l,t.length,n)}}async renderDaySegment(e,t,i,s,n){let o=e.createDiv({cls:"timeline-segment"});o.style.width=`${n}px`,o.style.left=`${n*i}px`,t.tasks.length===0&&o.addClass("timeline-segment-empty");let l=new Date(t.date);o.createDiv({cls:"timeline-segment-date"}).setText(l.toLocaleDateString("en-US",{month:"short",day:"numeric"})),o.createDiv({cls:"timeline-segment-weekday"}).setText(l.toLocaleDateString("en-US",{weekday:"short"})),o.createDiv({cls:"timeline-segment-time timeline-segment-time-start"}).setText("00:00"),o.createDiv({cls:"timeline-segment-time timeline-segment-time-end"}).setText("23:59");for(let D of t.tasks)await this.renderTaskInSegment(o,D)}async renderTaskInSegment(e,t){let s=(t.hour*60+t.minute)/1440*100,n=e.createDiv({cls:"timeline-task-dot"});n.style.left=`${s}%`,n.setAttribute("data-status",t.status),n.createDiv({cls:"timeline-task-label"}).setText(t.time);let l=n.createDiv({cls:"timeline-tooltip"}),r=l.createDiv({cls:"timeline-tooltip-content"}),m=r.createDiv({cls:"timeline-tooltip-task"});if(m.textContent=`[${t.status}] `,await this.renderTaskContent(m,t.content),t.subItems.length>0){let h=r.createEl("ul",{cls:"timeline-tooltip-subitems"});for(let g of t.subItems){let D=h.createEl("li");await this.renderTaskContent(D,g)}}n.addEventListener("mouseenter",()=>{let h=n.getBoundingClientRect();l.style.top=`${h.bottom+12}px`,l.style.left=`${h.left+h.width/2}px`,l.style.transform="translateX(-50%)",l.addClass("is-visible")}),n.addEventListener("mouseleave",()=>{l.removeClass("is-visible")})}async renderTaskContent(e,t){let i=/(!\[\[([^\]]+)\]\])|(\[\[([^\]]+)\]\])/g,s=0,n;for(;(n=i.exec(t))!==null;){if(n.index>s&&await this.renderTextWithLinks(e,t.substring(s,n.index)),n[1]){let o=n[2];await this.renderImage(e,o)}else if(n[3]){let o=n[4];this.renderLink(e,o)}s=n.index+n[0].length}s<t.length&&await this.renderTextWithLinks(e,t.substring(s))}async renderTextWithLinks(e,t){let i=e.createSpan();i.textContent=t}renderLink(e,t){let i=e.createEl("a",{cls:"internal-link timeline-tooltip-link",href:"#"});i.textContent=t,i.addEventListener("click",async s=>{s.preventDefault();let n=this.plugin.app.metadataCache.getFirstLinkpathDest(t,"");n&&await this.plugin.app.workspace.getLeaf(!1).openFile(n)})}async renderImage(e,t){let i=this.plugin.app.vault.getAbstractFileByPath(t);if(i&&i instanceof this.plugin.app.vault.adapter.constructor){let n=e.createDiv({cls:"timeline-tooltip-image"}).createEl("img"),o=this.plugin.app.vault.getResourcePath(i);n.src=o,n.alt=t}else{let n=this.plugin.app.vault.getFiles().find(o=>o.name===t||o.path.endsWith(t));if(n){let l=e.createDiv({cls:"timeline-tooltip-image"}).createEl("img"),r=this.plugin.app.vault.getResourcePath(n);l.src=r,l.alt=t}}}};var p=require("obsidian");var f=class extends p.PluginSettingTab{constructor(e,t){super(e,t);d(this,"plugin");this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Daily Notes Timeline Settings"}),new p.Setting(e).setName("Daily Notes Folder").setDesc("Path to your daily notes folder (leave empty for vault root or default daily notes location)").addText(t=>t.setPlaceholder("Daily Notes").setValue(this.plugin.settings.dailyNotesFolder).onChange(async i=>{this.plugin.settings.dailyNotesFolder=i,await this.plugin.saveSettings()})),new p.Setting(e).setName("Date Format").setDesc("Format used in daily note filenames (e.g., YYYY-MM-DD)").addText(t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async i=>{this.plugin.settings.dateFormat=i,await this.plugin.saveSettings()})),new p.Setting(e).setName("Default Timeline Range").setDesc("Number of months to display by default").addSlider(t=>t.setLimits(1,12,1).setValue(this.plugin.settings.defaultRangeMonths).setDynamicTooltip().onChange(async i=>{this.plugin.settings.defaultRangeMonths=i,await this.plugin.saveSettings()}))}};var T=class{constructor(a){d(this,"vault");this.vault=a}async getAvailableMonths(a,e){let t=new Set,i=this.vault.getMarkdownFiles();for(let s of i)if(this.isInDailyNotesFolder(s.path,a)){let n=this.extractDateFromFilename(s.name,e);if(n){let o=this.parseDate(n);if(o){let l=`${o.getFullYear()}-${o.getMonth()}`;t.add(l)}}}return Array.from(t).sort()}async parseDailyNotes(a,e,t,i){let s=new Map,n=this.vault.getMarkdownFiles();for(let r of n)if(this.isInDailyNotesFolder(r.path,a)){let m=this.extractDateFromFilename(r.name,e);if(m){let h=this.parseDate(m);if(h&&h>=t&&h<=i){let g=await this.extractTasks(r);s.set(m,{date:m,path:r.path,tasks:g})}}}let o=this.getAllDatesInRange(t,i),l=[];for(let r of o)s.has(r)?l.push(s.get(r)):l.push({date:r,path:"",tasks:[]});return l}getAllDatesInRange(a,e){let t=[],i=new Date(a);for(;i<=e;){let s=i.getFullYear(),n=String(i.getMonth()+1).padStart(2,"0"),o=String(i.getDate()).padStart(2,"0");t.push(`${s}-${n}-${o}`),i.setDate(i.getDate()+1)}return t}isInDailyNotesFolder(a,e){return e?a.startsWith(e):!0}extractDateFromFilename(a,e){let t=a.replace(/\.md$/,"");if(e==="YYYY-MM-DD"){let i=t.match(/(\d{4}-\d{2}-\d{2})/);return i?i[1]:null}return t}parseDate(a){try{let[e,t,i]=a.split("-").map(Number);return new Date(e,t-1,i)}catch(e){return null}}async extractTasks(a){let t=(await this.vault.cachedRead(a)).split(`
`),i=[],s=null,n=/^- \[([^\]]+)\]\s+\*(\d{2}:\d{2})\*\s+(.+)$/;for(let o=0;o<t.length;o++){let l=t[o],r=l.match(n);if(r){s&&i.push(s);let[,m,h,g]=r,[D,M]=h.split(":").map(Number);s={status:m,time:h,content:g.trim(),subItems:[],date:this.extractDateFromFilename(a.name,"YYYY-MM-DD")||"",hour:D,minute:M}}else s&&l.trim().startsWith("-")&&l.includes("	")?s.subItems.push(l.trim().substring(1).trim()):s&&!l.trim().startsWith("-")&&l.trim()!==""&&s&&(i.push(s),s=null)}return s&&i.push(s),i}};var b={dailyNotesFolder:"",dateFormat:"YYYY-MM-DD",defaultRangeMonths:1};var w=class extends k.Plugin{constructor(){super(...arguments);d(this,"settings");d(this,"parser")}async onload(){await this.loadSettings(),this.parser=new T(this.app.vault),this.registerView(u,e=>new v(e,this)),this.addRibbonIcon("calendar-clock","Open Daily Notes Timeline",()=>{this.activateView()}),this.addCommand({id:"open-timeline-view",name:"Open Daily Notes Timeline",callback:()=>{this.activateView()}}),this.addSettingTab(new f(this.app,this))}async activateView(){let{workspace:e}=this.app,t=e.getLeavesOfType(u)[0];t||(t=e.getLeaf(!0),await t.setViewState({type:u,active:!0})),e.revealLeaf(t)}async loadSettings(){this.settings=Object.assign({},b,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){this.app.workspace.detachLeavesOfType(u)}};
