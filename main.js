/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var y=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var M=Object.prototype.hasOwnProperty;var k=(u,a,e)=>a in u?y(u,a,{enumerable:!0,configurable:!0,writable:!0,value:e}):u[a]=e;var L=(u,a)=>{for(var e in a)y(u,e,{get:a[e],enumerable:!0})},Y=(u,a,e,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of F(a))!M.call(u,i)&&i!==e&&y(u,i,{get:()=>a[i],enumerable:!(t=N(a,i))||t.enumerable});return u};var I=u=>Y(y({},"__esModule",{value:!0}),u);var d=(u,a,e)=>k(u,typeof a!="symbol"?a+"":a,e);var P={};L(P,{default:()=>w});module.exports=I(P);var b=require("obsidian");var x=require("obsidian");var h="daily-notes-timeline",v=class extends x.ItemView{constructor(e,t){super(e);d(this,"plugin");d(this,"contentEl");d(this,"startDate");d(this,"endDate");this.plugin=t;let i=new Date;this.startDate=new Date(i.getFullYear(),i.getMonth(),1),this.endDate=new Date(i.getFullYear(),i.getMonth()+1,0)}getViewType(){return h}getDisplayText(){return"Daily Notes Timeline"}getIcon(){return"calendar-clock"}async onOpen(){let e=this.containerEl.children[1];e.empty(),e.addClass("timeline-view-container"),this.contentEl=e.createDiv({cls:"timeline-content"}),this.renderControls(),await this.renderTimeline()}async onClose(){this.contentEl.empty()}renderControls(){let e=this.contentEl.createDiv({cls:"timeline-controls"}),t=e.createEl("select",{cls:"dropdown"}),i=new Date().getFullYear();for(let s=i-1;s<=i+1;s++)for(let l=0;l<12;l++){let m=new Date(s,l,1),c=t.createEl("option");c.value=`${s}-${l}`,c.text=m.toLocaleDateString("en-US",{year:"numeric",month:"long"}),s===this.startDate.getFullYear()&&l===this.startDate.getMonth()&&(c.selected=!0)}t.addEventListener("change",async()=>{let[s,l]=t.value.split("-").map(Number);this.startDate=new Date(s,l,1),this.endDate=new Date(s,l+1,0),await this.renderTimeline()}),e.createEl("button",{text:"\u2190 Previous",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()-1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth(),0),await this.updateMonthSelect(t),await this.renderTimeline()}),e.createEl("button",{text:"Next \u2192",cls:"mod-cta"}).addEventListener("click",async()=>{this.startDate=new Date(this.startDate.getFullYear(),this.startDate.getMonth()+1,1),this.endDate=new Date(this.endDate.getFullYear(),this.endDate.getMonth()+2,0),await this.updateMonthSelect(t),await this.renderTimeline()}),e.createEl("button",{text:"Today",cls:"mod-cta"}).addEventListener("click",async()=>{let s=new Date;this.startDate=new Date(s.getFullYear(),s.getMonth(),1),this.endDate=new Date(s.getFullYear(),s.getMonth()+1,0),await this.updateMonthSelect(t),await this.renderTimeline()})}async updateMonthSelect(e){e.value=`${this.startDate.getFullYear()}-${this.startDate.getMonth()}`}async renderTimeline(){let e=this.contentEl.querySelector(".timeline-scroll");e&&e.remove();let t=this.contentEl.createDiv({cls:"timeline-scroll"}),i=await this.plugin.parser.parseDailyNotes(this.plugin.settings.dailyNotesFolder,this.plugin.settings.dateFormat,this.startDate,this.endDate);if(i.length===0){t.createDiv({cls:"timeline-empty",text:"No date range selected"});return}await this.renderContinuousTimeline(t,i)}async renderContinuousTimeline(e,t){let n=e.createDiv({cls:"timeline-continuous"}).createDiv({cls:"timeline-track-continuous"}),r=200,o=r*t.length;n.style.width=`${o}px`;for(let s=0;s<t.length;s++){let l=t[s];await this.renderDaySegment(n,l,s,t.length,r)}}async renderDaySegment(e,t,i,n,r){let o=e.createDiv({cls:"timeline-segment"});o.style.width=`${r}px`,o.style.left=`${r*i}px`,t.tasks.length===0&&o.addClass("timeline-segment-empty");let s=new Date(t.date);o.createDiv({cls:"timeline-segment-date"}).setText(s.toLocaleDateString("en-US",{month:"short",day:"numeric"})),o.createDiv({cls:"timeline-segment-weekday"}).setText(s.toLocaleDateString("en-US",{weekday:"short"})),o.createDiv({cls:"timeline-segment-time timeline-segment-time-start"}).setText("00:00"),o.createDiv({cls:"timeline-segment-time timeline-segment-time-end"}).setText("23:59");for(let D of t.tasks)await this.renderTaskInSegment(o,D)}async renderTaskInSegment(e,t){let n=(t.hour*60+t.minute)/1440*100,r=e.createDiv({cls:"timeline-task-dot"});r.style.left=`${n}%`,r.setAttribute("data-status",t.status),r.createDiv({cls:"timeline-task-label"}).setText(t.time);let s=r.createDiv({cls:"timeline-tooltip"}),l=s.createDiv({cls:"timeline-tooltip-content"}),m=l.createDiv({cls:"timeline-tooltip-task"});if(m.textContent=`[${t.status}] `,await this.renderTaskContent(m,t.content),t.subItems.length>0){let c=l.createEl("ul",{cls:"timeline-tooltip-subitems"});for(let g of t.subItems)c.createEl("li").setText(g)}r.addEventListener("mouseenter",()=>{s.addClass("is-visible")}),r.addEventListener("mouseleave",()=>{s.removeClass("is-visible")})}async renderTaskContent(e,t){let i=/!\[\[([^\]]+)\]\]/g,n=0,r;for(;(r=i.exec(t))!==null;){if(r.index>n){let l=e.createSpan();l.textContent=t.substring(n,r.index)}let o=r[1],s=this.plugin.app.vault.getAbstractFileByPath(o);if(s&&s instanceof this.plugin.app.vault.adapter.constructor){let m=e.createDiv({cls:"timeline-tooltip-image"}).createEl("img"),c=this.plugin.app.vault.getResourcePath(s);m.src=c,m.alt=o}else{let m=this.plugin.app.vault.getFiles().find(c=>c.name===o||c.path.endsWith(o));if(m){let g=e.createDiv({cls:"timeline-tooltip-image"}).createEl("img"),D=this.plugin.app.vault.getResourcePath(m);g.src=D,g.alt=o}else{let c=e.createSpan();c.textContent=r[0]}}n=r.index+r[0].length}if(n<t.length){let o=e.createSpan();o.textContent=t.substring(n)}}};var p=require("obsidian");var T=class extends p.PluginSettingTab{constructor(e,t){super(e,t);d(this,"plugin");this.plugin=t}display(){let{containerEl:e}=this;e.empty(),e.createEl("h2",{text:"Daily Notes Timeline Settings"}),new p.Setting(e).setName("Daily Notes Folder").setDesc("Path to your daily notes folder (leave empty for vault root or default daily notes location)").addText(t=>t.setPlaceholder("Daily Notes").setValue(this.plugin.settings.dailyNotesFolder).onChange(async i=>{this.plugin.settings.dailyNotesFolder=i,await this.plugin.saveSettings()})),new p.Setting(e).setName("Date Format").setDesc("Format used in daily note filenames (e.g., YYYY-MM-DD)").addText(t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange(async i=>{this.plugin.settings.dateFormat=i,await this.plugin.saveSettings()})),new p.Setting(e).setName("Default Timeline Range").setDesc("Number of months to display by default").addSlider(t=>t.setLimits(1,12,1).setValue(this.plugin.settings.defaultRangeMonths).setDynamicTooltip().onChange(async i=>{this.plugin.settings.defaultRangeMonths=i,await this.plugin.saveSettings()}))}};var f=class{constructor(a){d(this,"vault");this.vault=a}async parseDailyNotes(a,e,t,i){let n=new Map,r=this.vault.getMarkdownFiles();for(let l of r)if(this.isInDailyNotesFolder(l.path,a)){let m=this.extractDateFromFilename(l.name,e);if(m){let c=this.parseDate(m);if(c&&c>=t&&c<=i){let g=await this.extractTasks(l);n.set(m,{date:m,path:l.path,tasks:g})}}}let o=this.getAllDatesInRange(t,i),s=[];for(let l of o)n.has(l)?s.push(n.get(l)):s.push({date:l,path:"",tasks:[]});return s}getAllDatesInRange(a,e){let t=[],i=new Date(a);for(;i<=e;){let n=i.getFullYear(),r=String(i.getMonth()+1).padStart(2,"0"),o=String(i.getDate()).padStart(2,"0");t.push(`${n}-${r}-${o}`),i.setDate(i.getDate()+1)}return t}isInDailyNotesFolder(a,e){return e?a.startsWith(e):!0}extractDateFromFilename(a,e){let t=a.replace(/\.md$/,"");if(e==="YYYY-MM-DD"){let i=t.match(/(\d{4}-\d{2}-\d{2})/);return i?i[1]:null}return t}parseDate(a){try{let[e,t,i]=a.split("-").map(Number);return new Date(e,t-1,i)}catch(e){return null}}async extractTasks(a){let t=(await this.vault.cachedRead(a)).split(`
`),i=[],n=null,r=/^- \[([^\]]+)\]\s+\*(\d{2}:\d{2})\*\s+(.+)$/;for(let o=0;o<t.length;o++){let s=t[o],l=s.match(r);if(l){n&&i.push(n);let[,m,c,g]=l,[D,E]=c.split(":").map(Number);n={status:m,time:c,content:g.trim(),subItems:[],date:this.extractDateFromFilename(a.name,"YYYY-MM-DD")||"",hour:D,minute:E}}else n&&s.trim().startsWith("-")&&s.includes("	")?n.subItems.push(s.trim().substring(1).trim()):n&&!s.trim().startsWith("-")&&s.trim()!==""&&n&&(i.push(n),n=null)}return n&&i.push(n),i}};var S={dailyNotesFolder:"",dateFormat:"YYYY-MM-DD",defaultRangeMonths:1};var w=class extends b.Plugin{constructor(){super(...arguments);d(this,"settings");d(this,"parser")}async onload(){await this.loadSettings(),this.parser=new f(this.app.vault),this.registerView(h,e=>new v(e,this)),this.addRibbonIcon("calendar-clock","Open Daily Notes Timeline",()=>{this.activateView()}),this.addCommand({id:"open-timeline-view",name:"Open Daily Notes Timeline",callback:()=>{this.activateView()}}),this.addSettingTab(new T(this.app,this))}async activateView(){let{workspace:e}=this.app,t=e.getLeavesOfType(h)[0];t||(t=e.getLeaf(!0),await t.setViewState({type:h,active:!0})),e.revealLeaf(t)}async loadSettings(){this.settings=Object.assign({},S,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}onunload(){this.app.workspace.detachLeavesOfType(h)}};
